# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."dockur" = {
    image = "dockurr/windows";
    environment = {
      "CPU_CORES" = "2";
      "DISK_SIZE" = "48G";
      "KEYBOARD" = "fr";
      "RAM_SIZE" = "2G";
      "REGION" = "en-US";
      "VERSION" = "11";
    };
    ports = [
      "8006:8006/tcp"
      "3389:3389/tcp"
      "3389:3389/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--device=/dev/kvm:/dev/kvm:rwm"
      "--device=/dev/net/tun:/dev/net/tun:rwm"
      "--network-alias=windows"
      "--network=dockur_default"
    ];
  };
  systemd.services."docker-dockur" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-dockur_default.service"
    ];
    requires = [
      "docker-network-dockur_default.service"
    ];
    partOf = [
      "docker-compose-dockur-root.target"
    ];
    wantedBy = [
      "docker-compose-dockur-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-dockur_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f dockur_default";
    };
    script = ''
      docker network inspect dockur_default || docker network create dockur_default
    '';
    partOf = [ "docker-compose-dockur-root.target" ];
    wantedBy = [ "docker-compose-dockur-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-dockur-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
